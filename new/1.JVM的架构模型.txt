天下事有难易乎？    为之，难者亦易也；不为之，易者亦难也。
垃圾收集机制为我们打理了很多繁琐的工作，大大提高了开发效率，但是，垃圾收集也不是万能的，懂得JVM内部的内存结构、工作机制，是设计高拓展性应用和诊断运行时间问题的基础，也是Java工程师进阶的必备能力。


JVM的架构模型
    Java编译器输入的指令流基本上是一种基于栈的指令集架构，另一种指令集架构则是基于寄存器的指令集架构。
基于栈式架构的特点：
    1.设计何实现更简单，是用于资源受限的系统。
    2.避开了寄存器的分配难题，使用零地址指令方式分配。
    3.指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器更容易实现。
    4.不需要硬件支持，可移植性更好，更好实现跨平台。
基于寄存器架构的特点：
    1.典型的应用是x86的二进制指令集；比如传统的PC以及Android的Davlik虚拟机。
    2.指令集架构则完全以来硬件，可移植性差。
    3.性能优秀和执行更高效。
    4.花费更少的指令去完成一项操作。
    5.在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集确实以零地址指令为主。
虚拟机的生命周期：
    1.虚拟机的启动
        Java虚拟机的启动始通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的。
    2.虚拟机的执行
        1.一个运行中的Java虚拟机有着一个清晰的任务，执行Java程序。
        2.程序开始执行的时候它才开始运行，程序结束时它就停止。
        3.执行一个所谓的Java程序的时候，真真正正的在执行的是一个叫做Java虚拟机的进程。
    3.虚拟机的退出
        1.程序正常执行结束
        2.程序在执行过程中遇到了异常或错误而异常终止。
        3.由于操作系统出现错误而导致Java虚拟机进程终止。
        4.某线程调用Runtime类或System类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。
        除此之外，JNI(Java Native Interface)规范描述了用JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况。
JVM发展历程：
    1.Sun Classic VM
    2.Exact VM
    3.HotSpot
    4.JRockit
    5.J9

类加载器子系统作用
    1.类加载器子系统负责从文件系统或者网络中加载class文件，class文件在文件开头有特定的文件标识。
    2.classLoader只负责class文件的加载，至于它是否可以运行，则由ExecutionEngine决定
    3.加载的类信息存放于一块称为方法取的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息使CLass文件中常量池部分的内存映射）
类的加载过程：
    加载-->链接（验证-->准备-->解析）-->初始化
    1.加载：
        1.通过一个类的全限定名获取定义此类的二进制字节流
        2.见这个字节流所代表的静态存储结构转化为方法区的运行时数据结构
        3.在内存中生成一个代表这个类的Java.lang.Class对象，作为方法区这个类的各种数据的访问入口
        **加载.class文件的方式
            1.从本地系统中直接加载
            2.通过网络获取，典型场景：web Applet
            3.从zip压缩包中读取，成为日后jar、war格式的基础
            4.运行时计算生成，使用最多的是：动态代理技术
            5.有其他文件生成，典型场景：JSP应用
            6.从专有数据库中提取.class文件，比较少见
            7.从加密文件中获取，典型的方class文件被反编译的保护措施
    2.链接
        1.验证（Verify）
            1.目的在于确保class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。
            2.主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证
        2.准备（Prepare）：
            1.为类变量分配内存并且设置该类变量的默认初始值，即零值。
            2.这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示初始化。
            3.这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。
        3.解析（Resolve）：
            1.将常量池内的符号引用转化为直接引用的过程。
            2.事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。
            3.符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中，直接引用就是直接指向目标的指针、相对偏移量或一个简介定位到目标的句柄。
            4.解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等，对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。
    3.初始化：
        1.初始化阶段就是执行类构造器方法<clinit>()的过程。
        2.此方法不需要定义，是javac编译器自动收集类中的所有类变量的复制动作和静态代码块中的语句合并而来。
        3.构造器方法中指令按语句在源文件中出现的顺序执行。
        4.<clinit>()不同于类的构造器。（关联：构造器是虚拟机视角下的<init>()）
        5.若该类具有符类，JVM会保证字类的<clinit>()执行前，父类的<clinit>()已经执行完毕。
        6.虚拟机必须保证一个类的<clinit>()方法在多线程下被同不加锁。