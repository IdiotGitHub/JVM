Java代码有很多种不同的运行方式：可以在开发工具中运行，可以双击jar文件运行，也可以在命令行中运行，甚至可以在网页中运行（但是这些运行都必须依靠JRE-->java Runtime Environment）
    -->JRE仅包括运行Java时的必要组件，Java虚拟机以及Java核心类库
    -->机器码：CPU能理解的代码
1.在Java程序运行之前需要进行一番转换：
    设计一个面向Java语言特性的虚拟机，并通过编译器将Java程序转换成该虚拟机能够识别的指令序列，也称Java字节码（Java字节码指令的操作码被固定为一个字节）
    -->虚拟机的另一个好处是带来了一个托管环境，这个托管环境能够代替人们处理一些冗长且容易出错的操作--垃圾回收和动态内存管理，除此之外还提供了诸如数组越界、动态类型、安全权限等等的动态检测
2.Java虚拟机具体是怎样运行Java字节码的？（前面已经说过运行Java代码之前需要先将代码转换为Java字节码）
    在HotSpot虚拟机中：
        -->先将编译而成的class文件加载到虚拟机中，该文件会被放到虚拟机的方法区中，在实际运行时虚拟机执行方法区中的代码
    Java虚拟机在内存中划分出堆和栈来储存运行时数据（具体又会细分成Java方法栈和本地方法栈还有PC寄存器）
        -->Java方法栈：面向Java方法
        -->本地方法栈：面向本地方法（用C++写的native方法）
        -->PC寄存器：用来存放各个线程执行位置
    运行过程中：
        每当调入一个Java方法，Java虚拟机会在当前进程的Java方法栈中生成一个栈帧（可以理解为栈就是由栈帧组成的），来存放局部变量以及字节码的操作数。并且这个栈帧的大小是提前计算好的，
        Java虚拟机并不要求栈帧在内存空间里连续分布。
        当执行完该Java方法时，Java虚拟机都会将该栈帧弹出Java方法栈（不管是正常返回还是异常返回）
    在HotSpot虚拟机中，上述翻译过程有两种形式：
        -->解释执行：逐行将字节码编译成机器码并执行。其优势是，无需等待编译
        -->即时编译（JIT， Just-In-Time compilation）：将整个方法中包含的所有字节码编译成机器码再执行。其优势是，在实际运行中速度更快
            -->HotSpot默认采用混合模式，综合两种方式的有点。（先解释执行字节码，而后将反复执行的热点代码，以方法为单位进行即时编译）
3.Java虚拟机的运行效率
    HotSpot采用了多种技术来提升启动性能和峰值性能，其中即时编译便是其中最重要的技术之一
        -->对于占据大部分的不常用的代码无需耗费时间将其编译成机器码（这里说的无需编译成机器码的意思应该是跟即时编译是相对的，即边编译便执行，也是需要将字节码编译成机器码的，我是这么理解的），采用解释执行，
        -->对于小部分的热点代码，将其编译成机器码（这里的编译成机器码的意思应该是将整个的热点代码全部编译成机器码在进行执行）以达到理想速度
            -->（理论上讲，即时编译后的Java程序的执行效率，是可能超过C++程序的，这是因为与静态编译（顾名思义，C++是采用静态编译）相比，即时编译拥有程序运行时信息，并且能够根据这个信息做出相应的优化。）
    HotSpot内置了多个即时编译器：C1、C2和Graal（引入多个编译器的目的是在编译时间和生成代码的执行效率之间进行取舍）
        -->C1（Client编译器）：面向的是对启动性能有要求的客户端GUI程序，编译时间较短
        -->C2（Server编译器）：面向的是对峰值性能有要求的服务器端程序，编译时间长，但同时生成代码的执行效率较高
        Java7开始HotSpot默认采用分层编译的方式：热点方法首先会被C1编译，而后热点方法中的热点会进一步被C2编译

总结：
    Java虚拟机由五部分组成：方法区（元空间），堆，PC寄存器，Java方法栈，本地方法栈。
    Java程序编译生成的class文件先加载至方法区，才能在虚拟机中运行。
        