1.父类的静态方法不能被子类重写，如果子类中存在跟父类静态方法重名的方法，会将父类中同名的静态方法隐藏
2.静态变量存储在方法区；实例变量存储在堆中，其引用存放在当前线程栈

##3.可以创建一个包含可变对象的不可变对象，只要不共享可变对象的引用就可以（不明白）！！！！
4.Java创建对象的方式：
    -->1.new这个是天天用的；
    -->2.通过Java的反射机制；
    -->3.采用clone；
    -->4.通过序列化机制
    -->耦合度最高的是new，
    ##-->除了new以外一个都不懂
5.Java1.7之前switch不能使用String类型做参数；switch可以作用在byte上，不可以用在Long上
6.String s1 = "a", s2 = "ab", s3 = "a" + "b", s4 = "b";String s5 = s1 + s4;问s5 == s3返回什么？
    -->返回false。
    -->在编译过程中，编译器会直接将s3优化为"ab"存入常量池中，而s5相当于String s5 = new String("ab"),一般来讲Java中创建对象是存放在堆中，而 == 比较的是两个对象的地址，所以会返回false
    -->如果真的要比较两个字符串的值的话，就用s3.equals(s5)
    ??(这里的意思是不是说当两个String类型进行基本运算时返回的是对象？)
7.String对象的intern()
    -->intern()方法会首先从常量池中查找是否存在该常量值，如果不存在则创建，如果存在则直接返回。
8.Object中的公共方法：
    -->equals()
    -->clone():(说真的没看懂具体是干嘛的.....)保护方法，实现对象的浅复制，只有实现了cloneable接口才可以使用该方法，否则抛出CloneNotSupportedException异常
    -->getClass()：final方法，获得运行时类型（返回的是详细类名-->具体包名加类名）
    --> wait()：wait方法就是使当前线程等待对某一个对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁（只是使该线程一直处于等待状态），知道获得锁或者被中断wait(long timeout)设定一个超时时间，超时则返回
        -->当某个线程调用wait()方法后便进入睡眠状态，直到以下事件发生：
            -->其他线程调用了该对象的notify()方法
            -->其他线程调用了该对象的notifyAll()方法
            -->其他线程调用了interrupt中断该线程
            -->timeout时间间隔到
    -->notify() ：唤醒在该对象上等待的某个线程
    -->notifyAll()：唤醒在该对象上等待的所有线程
    -->toString()
    -->hashCode()：该方法用于哈希查找，可以减少在查找中使用equals的次数，重写了equals方法一般都要重写hashCode方法，这个方法在一些具有哈希功能的Collection中用到。一般必须满足obj1.equals(obj2)==true,才能推出obj1.hashCode()==obj2.hashCode(),但反过来就不一定
    -->finalize()：用来释放资源（很少使用）
9.Java中的四种引用：
    -->强引用：如果一个对象具有强引用，他就不会被垃圾回收器回收，即使当前内存空间不足也不会被回收，二十抛出OutOfMemoryError错误，是程序异常终止。如果想要中断强引用和某个对象之间的关联，可以显示的将引用赋值为null，这样一来得话，JVM就会在合适的时候回收该对象
    -->软引用：在使用弱引用的时候，如果内存充足就不会回收该对象，只有在内存不足的时候回收软引用
    -->弱引用：具有弱引用的对象拥有的生命周期更短暂。JVM在回收垃圾时只要发现弱引用就会回收
    -->虚引用：在任何时候都可能被垃圾回收器回收
10.软引用和弱引用的区别：
    -->在最后一个强引用被回收后，弱引用一定会被回收，
    -->软引用可以延迟到JVM内存不足的时候才会被回收
11.为什么要有不通的引用类型
    不像C语言，我们可以控制内存的申请和释放，在Java中有时候我们需要适当的控制对象被回收的时机，
12.Java中equals()和hashCode()的联系：
    -->在第六条中已经说过了，
13.两个不相等的对象可能会有相等的hashCode
14.不可以再hashCode中使用随机数字，因为同一个对象的hashCode值必须是相同的
15.3*0.1 == 0.3的返回值是false，
    -->有些浮点数不能完全精确的表示出来
16.a = a + b 与 a += b的区别：
    -->byte a = 127;
    -->byte b = 127;
    -->a = a + b;byte类型在进行运算时会自动地提升为int类型，而a是byte类型，所以会产生类型错误
    -->a += b;这个地方会自动的将a进行类型转换
17.short s1 = 1; s1 = s1 + 1;同理16会产生类型错误
    -->short s1 = 1; s1 += 1;就不会有错，原因就在于 +=会进行隐式自动类型转换
18.声明一个string 对象不会分配内存，
19.一个Java文件内部只能有一个public修饰的类，但可以有多个default修饰的类
20.正确退出多层循环：
    -->使用标号和break
    -->通过在外层循环中添加标识符
    -->
        here1:
        for(int i = 0; i < 10; i ++){
            here2:
            for(int j = 0; j < 10; j ++){
                if(){
                    break here1;//就会跳出外层循环
                }
            }
        }
21.final, finalize, finally的不同之处
    -->final是一个修饰符，可以修饰变量，方法和类。如果变量被修饰，则意味着这个变量一旦被赋值初始化后，就不能改变
    -->finalize方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用finalize没有保证
    -->finally是一个关键字，与try，catch一起用于异常处理，不管会不会发生异常都会被执行的代码块
22.clone()方法是Object类中定义的方法，而且它是一个本地方法，由C++/C实现的
23.浅拷贝和深拷贝的区别：
    -->浅拷贝：
        被复制的对象所有的变量的值都会被拷贝，而对象其他所有的引用仍然都指向原来的对象
    -->深拷贝：
        被复制的对象的所有变量的值都会被拷贝，所有的引用都会指向一个新的对象
24.static的用法：
    -->静态变量
    -->静态方法
    -->静态代码块：用来初始化操作
    -->静态内部类
    -->静态导包
25.final的用法：
    -->被final修饰的类不能被继承
    -->被final修饰的方法不能被重写
    -->被final修饰的变量的值不能被改变，如果修饰的是引用那么，引用不可变，但引用指向的内容可变
    -->被final修饰的方法，JVM会将其内联，以提高运行效率
    -->被final修饰的变量，在编译阶段会存入常量池
26.int和Integer的区别：
    -->int是基本类型，直接存值
    -->Integer是对象，用一个引用指向这个对象，需要存储对象的元数据，更耗费空间
27.垃圾回收：
    -->

28.垃圾回收算法：
    -->标记-清除
    -->标记-复制
    -->标记-整理
    -->分代回收
29.如何判断一个对象是否应该被回收（就是所谓的对象存活性判断）：
    -->引用计数法
    -->对象可达性分析：由于对象之间的相互引用导致无法进行GC的问题，目前JVM多使用对象可达性分析
30.调用System.gc()是通知GC开始工作，但GC真正开始工作的时间不确定
31.守护线程与非守护线程：
    -->守护线程：是指在程序运行的时候在后台提供一种通用服务的线程 ，比如垃圾回收线程。并且这种线程并不属于程序中不可或缺的部分，因此当所有的非守护线程结束的时候，程序就会终止，所有的守护线程也会被杀死
    -->非守护线程也就是用户线程，两者没有本质的区别，可以使用Thread.setDeamon(true)来将一个用户线程设置为守护线程。需要注意的是，不能将一个正在运行的线程设置为守护线程，由守护线程产生的线程也是守护线程
32.多线程上下文切换：是指CPU控制权由一个正在运行的线程切换到另一个就绪并等待获取CPU执行权的线程的过程
33.创建进程的两种方式：
    -->继承Thread类
    -->实现Runnable接口
        -->使用第二种方法更好一些：
            -->Java不支持多继承，如果继承了Thread类，该类就不能继承其他类
            -->类可能只要求执行即可，因此继承整个Thread类的开销过大
34.Thread类中的start()方法和run()方法的区别：
    -->start()方法是用来启动新创建的线程，而且start()内部调用了run()方法，
    -->如果直接调用run()方法的时候，只会在原来的线程中调用（就像调用普通方法一样，调用了一下run()方法），没有启动新创建的进程
35.